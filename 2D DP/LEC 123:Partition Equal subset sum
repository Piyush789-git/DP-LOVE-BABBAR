class Solution {
  public:
  bool solve(int index,vector<int>&arr,int n, int target){
      //base case
      if(index>=n)
      return 0;
      if(target < 0)
      return 0;
      if(target ==0)
      return 1;
      
      bool incl =solve(index+1,arr,n,target-arr[index]);
      bool excl =solve(index+1,arr,n,target-0);
      
      return incl or excl;
  }
  bool solveMem(int index,vector<int>&arr,int n, int target,vector<vector<int>>&dp){
      //base case
      if(index>=n)
      return false;
      if(target < 0)
      return false;
      if(target ==0)
      return true;
      
      if(dp[index][target]!=-1)
          return dp[index][target];
      
      
      bool incl =solveMem(index+1,arr,n,target-arr[index],dp);
      bool excl =solveMem(index+1,arr,n,target-0,dp);
      
      return dp[index][target]= incl || excl;
  }
  bool solveTab(int n, vector<int>&arr,int total){
      vector<vector<int> >dp(n+1,vector<int>(total+1,0));
      
      for(int i=0;i<=n;i++){
          dp[i][0]=1;
      }
      for(int index =n-1;index>=0;index--){
          for(int target=0;target<=total/2;target++){
              bool incl=0;
              if(target -arr[index]>=0)
                incl =dp[index+1][target-arr[index]];
                
               bool excl =dp[index+1][target];
      
       dp[index][target]= incl || excl;
          }
      }
      return dp[0][total/2];
      
  }
  bool solveSO(int n, vector<int>&arr,int total){
      
       vector<int>curr(total+1,0);
       vector<int>next(total+1,0);
       
     curr[0] =1;
     next[0] =1;
      
     
      for(int index =n-1;index>=0;index--){
          for(int target=0;target<=total/2;target++){
              bool incl=0;
              if(target -arr[index]>=0)
            incl =next[target-arr[index]];
                
               bool excl =next[target];
      
       curr[target]= incl || excl;
          }
          next =curr;
      }
      return next[total/2];
      
  }
    bool equalPartition(vector<int>& arr) {
        int n=arr.size();
        int total =0;
        for(int i=0;i<n;i++){
            total+=arr[i];
        }
        
        if(total %2 !=0)
        return false;
        
        int target =total/2;
        
        //return solve(0,arr,n,target);
        
        
        //vector<vector<int>> dp(n,vector<int>(target+1,-1));
        //return solveMem(0,arr,n,target,dp);
        
        //return solveTab(n,arr,total);
        
        return solveSO(n,arr,total);
         
    }
};
