class Solution {
  public:
  int solve(int n, vector<int>&arr,int curr, int prev){
      //base case
      if(curr == n){
          return 0;
      }
      //include
      int take =0;
      if(prev ==-1 || arr[curr]>arr[prev])
      take =1+solve(n ,arr, curr+1,curr);
      
      //exclude(
      int nottake = 0 + solve(n ,arr, curr+1,prev);
      return max(take ,nottake);
  }
    int solveMem(int n, vector<int>&arr,int curr, int prev,vector<vector<int> >&dp){
      //base case
      if(curr == n){
          return 0;
      }
      if(dp[curr][prev+1]!=-1){
      return dp[curr][prev+1];
      }
      //include
      int take =0;
      if(prev ==-1 || arr[curr]>arr[prev])
      take =1+solveMem(n ,arr, curr+1,curr,dp);
      
      //exclude(
      int nottake = 0 + solveMem(n ,arr, curr+1,prev,dp);
      //prev+1 invalid index na ho 
      return dp[curr][prev+1] =max(take ,nottake);
  }
  int solveTab(int n,vector<int>& arr ){
      vector<vector<int>>dp(n,vector<int>(n+1, 0));
      
      for( int curr= n-1;curr>=0;curr--){
          for(int prev =curr-1;prev>=-1;prev--){
               //include
      int take =0;
      if(prev ==-1 || arr[curr]>arr[prev])
      take =1+dp[curr+1][curr+1];
      
      //exclude(
      int nottake = 0 + dp[curr+1][prev+1];
      //prev+1 invalid index na ho 
     dp[curr][prev+1] =max(take ,nottake);
          }
      }
      return dp[0][-1+1];
  }
   int solveSO(int n,vector<int>& arr ){
      
      
      vector<int> currRow(n+1 ,0);
      vector<int> nextRow(n+1,0);
      
      for( int curr= n-1;curr>=0;curr--){
          for(int prev =curr-1;prev>=-1;prev--){
               //include
      int take =0;
      if(prev ==-1 || arr[curr]>arr[prev])
      take =1+nextRow[curr+1];
      
      //exclude(
      int nottake = 0 + nextRow[prev+1];
      //prev+1 invalid index na ho 
     currRow[prev+1] =max(take ,nottake);
          }
          nextRow =currRow;
      }
      return nextRow[0];
  }
//DP WITH BINARY SEARCH
  int solveOptimal(int n, vector<int>&arr){
      if(n ==0)
      return 0;
      
      vector<int>ans;
      ans.push_back(arr[0]);
      
      for(int i=1;i<n;i++){
          if(arr[i] > ans.back())
          ans.push_back(arr[i]);
          
          
      
      else {
          //find index of just badda element in ans
          int index =lower_bound(ans.begin(),ans.end(),arr[i])-ans.begin();
          ans[index]= arr[i];
      }
      
  }
  return ans.size();
}
    // Function to find length of longest increasing subsequence.
    int longestSubsequence(vector<int>& arr) {
        int n=arr.size();
       // return solve(n,arr,0,-1);
       
       //vector<vector<int> >dp(n,vector<int> (n+1,-1));
       //return solveMem(n ,arr, 0, -1, dp);
       
       //return solveTab(n,arr);
       
      // return solveSO(n,arr);
        return solveOptimal(n,arr);
    }
};
